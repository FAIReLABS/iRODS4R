[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "iRODS4R",
    "section": "",
    "text": "Care about FAIR\n\n\nFirst release of rirods\n\n\n\n\nnews\n\n\nR\n\n\nFAIR\n\n\nopen science\n\n\n\n\n\n\n\n\n\n\n\nAugust 7, 2023\n\n\nMartin Schobben, Mariana Montes, Terrell Russell\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/rirods-0-1-1/index.html",
    "href": "posts/rirods-0-1-1/index.html",
    "title": "Care about FAIR",
    "section": "",
    "text": "This article is about the first release of rirods (see the documentation).\nThe data that drives our R workflow is just as important as the script. Nevertheless, the emphasis lies often on the R script when it comes to reproducibility, but that is not necessarily the most convenient in all circumstances.\nThere are several data management solutions available for R, mostly SQL based solutions, made accessible through the R package DBI. This requires data to be in a tabular format. iRODS can, however, simplify storing data as you are freed from strict formatting requirements (more about iRODS below). We leveraged iRODS’ functionality for R in the new package rirods. This means that you can move around and store any R object as you like.\nImagine you just created an R workflow, where you investigate the number of commits made by contributors for iRODS repositories.\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(ggplot2)\n\ncommits &lt;- read_csv(\"https://raw.githubusercontent.com/FAIReLABS/iRODS4R/main/posts/rirods-0-1-1/data/irods_commits.csv\")\n\ncommits &lt;- commits |&gt; \n  filter(!fork, !archived, !private, !is.na(commits_names)) |&gt; \n  mutate(\n    commits_names = fct_lump(commits_names, 10),\n    commits_names = fct_infreq(commits_names)\n  )\n\nggplot(commits,aes(x = commits_names)) + \n    geom_bar() + \n    coord_flip()\n\n\n\n\nTo reproduce this new data set we could of course rerun the whole script, but imagine that we would have done a similar analysis for a much larger contingent of GitHub repositories. Then it becomes worthwhile to also save these intermediate transformations. We could save this data locally, but a much safer and convenient solution would be to save this in a dedicated data management system.\nHere comes rirods into the picture. Install the package from CRAN or get the development version from GitHub.\n\ninstall.packages(\"rirods\")\n\nWe will demonstrate rirods usage by running a mock server on your localhost. The username and password are set to \"martin\" and \"secret\" for the example, but can be changed accordingly.\nNote that one needs Bash and Docker (with docker-compose) to use this mock-up.\n\nlibrary(rirods)\nuse_irods_demo(\"martin\", \"secret\")\n\n\nDo the following to connect with the iRODS demo server: \ncreate_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\") \niauth(\"martin\", \"secret\")\n\n\nWe follow the instructions from the output and create a project file with the server details and login to the system with our credentials.\n\ncreate_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")\niauth(\"martin\", \"secret\")\n\nNow we can save the R object commits with isaveRDS(), which behaves similar to base R’s saveRDS().\n\nisaveRDS(commits, \"commits.rds\")\n\nThis is not all. You can now also label this data set by adding metadata.\n\nimeta(\"commits.rds\",\n      \"data_object\",\n      operations =\n        list(\n          list(\n            operation = \"add\",\n            attribute = \"content\",\n            value = \"commit history iRODS\"\n          ),\n          list(\n            operation = \"add\",\n            attribute = \"file_type\",\n            value = \"R object\",\n            units = \"RDS\"\n          )\n        ))\n\nNow let’s have a look at how this looks like within the iRODS server with ils(), which is somewhat similar to base R’s list.files().\n\nils(metadata = TRUE)\n\n\n========\nmetadata\n========\n/tempZone/home/martin/commits.rds :\n attribute                value units\n   content commit history iRODS      \n file_type             R object   RDS\n\n\n==========\niRODS Zone\n==========\n                      logical_path        type\n /tempZone/home/martin/commits.rds data_object\n\n\nThis makes the data discoverable on the iRODS server. Hence rirods not only helps you store and find data, but it also makes sharing data with your peers more straightforward.\nAs it seems you were not yet done with your analysis of the iRODS commit history. You put considerable effort in creating an informative plot, which lists commits according to the most popular repositories as well as authors.\n\nplot_commits &lt;- commits |&gt;\n  mutate(names = if_else(stargazers_count &gt; 10, names, \"other\")) |&gt;\n    ggplot(aes(x = commits_names, fill = names)) +\n      geom_bar(position = \"stack\") +\n      coord_flip() +\n      theme(\n        legend.position = \"top\",\n        legend.title = element_blank(),\n        legend.key.size = unit(4, \"point\"),\n        legend.text = element_text(size = 7)\n      )\n\nThis is also no problem for rirods, as long as we deal with an R object, we can store it in iRODS.\n\nisaveRDS(plot_commits, \"plot_commits.rds\")\n\nLater on we can directly get the object back in an R environment, thereby plotting the results.\n\nireadRDS(\"plot_commits.rds\")\n\n\n\n\nLet’s terminate the iRODS demo server and give a short introduction to iRODS.\n\nstop_irods_demo()\n\nThe Integrated Rule-Oriented Data System (iRODS) is an open sourced data management software suite that covers the whole data life cycle from data generation, storage and recycling. The loosely constructed and highly configurable architecture of iRODS frees the user from strict formatting constrains and single-vendor solutions. Furthermore, the open-sourced and community supported nature of iRODS safeguards data storage and re-usability of data in terms of longevity and independently of future technological innovations.\nYou can watch the videos to get a better understanding of what iRODS brings to data management.\n\n\n\n\n\nAutomated Data Management: An Introduction to iRODS\n\n\n\n\niRODS: open source data management software\n\n\n\n\n\nOr visit the iRODS website: https://irods.org/.\nThe code to generate iRODS GitHub commit history can be found here, and is based on this blog by Maëlle Salmon."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "One of the biggest problems in research is the inadvertent destruction of data and the inaccessibility of data due to poor labeling and description of data. This loss of data means that studies cannot be replicated, combined or re-used in different settings (Briney 2015; Wilkinson et al. 2016). Data management becomes more important, but also more challenging, in the age of rapid digital data production. The Integrated Rule-Oriented Data System (iRODS) (Rajasekar et al. 2010, 2015) is an open sourced data management software suite that offers a solution to this demand, which encompasses the whole data life cycle from data generation, storage and recycling. The loosely constructed and highly configurable architecture of iRODS frees the user from strict formatting constrains and single-vendor solutions. Furthermore, the open-sourced and community supported nature of iRODS safeguards data storage and re-usability of data in terms of longevity and independently of future technological innovations.\nNonetheless, the learning curve of how to implement iRODS effectively for day-to-day data management purposes can be steep for the average scientist. Hence there have been multiple incentives to lower this barrier by hiding parts of the behind-the-scenes business logic which requires considerable knowledge of command line tools. Highly popular among academics are higher level programming languages, such as R, that can help construct such data analyses workflows. The R package rirods (Schobben and Montes 2023) leverages iRODS in R. This packages allows straightforward integration of data management practices in the R environment, thereby ensuring the findability, accessibility, interoperability, and reusability (FAIR) of data.\n\n\n\nReferences\n\nBriney, Kristin. 2015. Data Management for Researchers: Organize, Maintain and Share Your Data for Research Success. Pelagic Publishing Ltd.\n\n\nRajasekar, Arcot, Reagan Moore, Chien-Yi Hou, Christopher A. Lee, Richard Marciano, Antoine de Torcy, Michael Wan, et al. 2010. “iRODS Primer: Integrated Rule-Oriented Data System.” Synthesis Lectures on Information Concepts, Retrieval, and Services 2 (1): 1–143. https://doi.org/10.2200/s00233ed1v01y200912icr012.\n\n\nRajasekar, Arcot, Terrell Russell, Jason Coposky, Antoine de Torcy, Hao Xu, Michael Wan, Reagan W. Moore, et al. 2015. The integrated Rule-Oriented Data System (iRODS 3.0) Micro-service Workbook.\n\n\nSchobben, Martin, and Mariana Montes. 2023. Rirods: R Client for iRODS. https://github.com/irods/irods_client_library_rirods.\n\n\nWilkinson, Mark D, Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al. 2016. “Comment: The FAIR Guiding Principles for scientific data management and stewardship.” Scientific Data 3: 1–9. https://doi.org/10.1038/sdata.2016.18."
  }
]