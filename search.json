[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "irods4R",
    "section": "",
    "text": "Welcome To iRODS4R\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nInvalid Date\n\n\nMartin Schobben, Mariana Montes, Terrell Russell\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To iRODS4R",
    "section": "",
    "text": "The data that drives our R workflow is just as important the script. Nevertheless, the emphasis lies often on the R script when it comes to reproducibility, but that is not necessarily the most convenient in all circumstances.\nThere are several data management solutions available for R, mostly SQL based solutions, made accessible through the R package DBI. Nonetheless iRODS can simplify storing data as you are freed from strict formatting requirements (more about iRODS below). We leveraged this iRODS’ functionality for R with rirods. This means that you can move around and store any R object as you like.\nImagine you just created an R workflow, where you investigate the number of commits made by contributors for iRODS repositories.\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(ggplot2)\n\nirods_files <- c(\"irods_repos.csv\", \"irods_commits.csv\")\npt <- here(\"posts\", \"welcome\", \"data\", irods_files)\n\nrepos <- read_csv(pt[1], show_col_types = FALSE)\ncommits <- read_csv(pt[2], show_col_types = FALSE)\n\nrepos_commits <- repos |> \n  filter(!fork, !archived, !private) |> \n  left_join(commits) |> \n  mutate(\n    commits_names = fct_lump(commits_names, 10, other_level = \"other\"),\n    commits_names = if_else(is.na(commits_names), \"other\", commits_names),\n    commits_names = fct_infreq(commits_names)\n  )\n\nggplot(repos_commits, aes(x = commits_names)) + \n      geom_bar() + \n      coord_flip()\n\n\n\n\nTo reproduce this new data set we could of course rerun the whole script, but imagine that we would have done a similar analysis for a much larger contingent of GitHub repositories. Then it becomes worthwhile to also save these intermediate transformations. We could save this data locally, but a much safer and convenient solution would be to save this in a dedicated data management system.\nHere comes rirods into the picture. We will demonstrate this with a mock server on your localhost.\nNote that one needs Bash and Docker (with docker-compose) to use this mock-up.\n\nlibrary(rirods)\nuse_irods_demo(\"martin\", \"secret\")\n\n\nDo the following to connect with the iRODS demo server: \ncreate_irods(\"http://localhost/irods-rest/0.9.3\", \"tempZone/home\") \niauth(\"martin\", \"secret\")\n\n\nWe follow the instruction from the output and create a project file with the server details and login to the system with our credentials.\n\ncreate_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")\niauth(\"martin\", \"secret\")\n\n\n\n\nNow we can save the R object repos_commits with isaveRDS(), which behaves similar to base R’s saveRDS.\n\nisaveRDS(repos_commits, \"repos_commits.rds\")\n\n\n\n\nThis is not all. You can now also label this data set by adding metadata.\n\nimeta(\n \"repos_commits.rds\",\n \"data_object\",\n operations =\n  list(\n   list(operation = \"add\", attribute = \"dataframe\", value = \"commit history iRODS\", units = \"counts\")\n )\n)\n\n# look at the metadata\nils(metadata=TRUE)\n\n                             logical_path\n1  /tempZone/home/martin/plot_commits.rds\n2 /tempZone/home/martin/repos_commits.rds\n                                 metadata        type\n1                                    NULL data_object\n2 dataframe, commit history iRODS, counts data_object\n\n\nThis makes the data discoverable by others on the iRODS server. Hence rirods not only helps you store data, but it also makes sharing data with your peers more straightforward.\nAs it seems you were not yet done with your analysis of the commit history of iRODS. You put considerable effort in creating an informative plot, which lists commits according to most popular repositories. This is also no problem for rirods.\n\n plot_commits <- repos_commits |> \n  mutate(\n    names = if_else(stargazers_count > 10, names, \"other\")\n  ) |> \n    ggplot(aes(x = commits_names, fill = names)) + \n      geom_bar(position = \"stack\") + \n      coord_flip() +\n      theme(legend.position = \"top\", legend.title = element_blank())\n\nisaveRDS(plot_commits, \"plot_commits.rds\")\n\n\n\n\nWe can then read it back directly in an R environment.\n\nireadRDS(\"plot_commits.rds\")\n\n\n\n\n\n#stop_irods_demo()\n\nLet’s spin back and give a short introduction to iRODS."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]